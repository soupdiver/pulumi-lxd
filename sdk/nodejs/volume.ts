// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lxd:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public readonly config!: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly expandedConfig!: pulumi.Output<{[key: string]: any}>;
    public readonly name!: pulumi.Output<string>;
    public readonly pool!: pulumi.Output<string>;
    public readonly remote!: pulumi.Output<string | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["expandedConfig"] = state ? state.expandedConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pool"] = state ? state.pool : undefined;
            inputs["remote"] = state ? state.remote : undefined;
            inputs["target"] = state ? state.target : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pool"] = args ? args.pool : undefined;
            inputs["remote"] = args ? args.remote : undefined;
            inputs["target"] = args ? args.target : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["expandedConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    readonly config?: pulumi.Input<{[key: string]: any}>;
    readonly expandedConfig?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly pool?: pulumi.Input<string>;
    readonly remote?: pulumi.Input<string>;
    readonly target?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    readonly config?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly pool: pulumi.Input<string>;
    readonly remote?: pulumi.Input<string>;
    readonly target?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
