// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cachedImage";
export * from "./container";
export * from "./containerFile";
export * from "./network";
export * from "./profile";
export * from "./provider";
export * from "./publishImage";
export * from "./snapshot";
export * from "./storagePool";
export * from "./volume";
export * from "./volumeContainerAttach";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { CachedImage } from "./cachedImage";
import { Container } from "./container";
import { ContainerFile } from "./containerFile";
import { Network } from "./network";
import { Profile } from "./profile";
import { PublishImage } from "./publishImage";
import { Snapshot } from "./snapshot";
import { StoragePool } from "./storagePool";
import { Volume } from "./volume";
import { VolumeContainerAttach } from "./volumeContainerAttach";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "lxd:index/cachedImage:CachedImage":
                return new CachedImage(name, <any>undefined, { urn })
            case "lxd:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "lxd:index/containerFile:ContainerFile":
                return new ContainerFile(name, <any>undefined, { urn })
            case "lxd:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "lxd:index/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "lxd:index/publishImage:PublishImage":
                return new PublishImage(name, <any>undefined, { urn })
            case "lxd:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "lxd:index/storagePool:StoragePool":
                return new StoragePool(name, <any>undefined, { urn })
            case "lxd:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "lxd:index/volumeContainerAttach:VolumeContainerAttach":
                return new VolumeContainerAttach(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("lxd", "index/cachedImage", _module)
pulumi.runtime.registerResourceModule("lxd", "index/container", _module)
pulumi.runtime.registerResourceModule("lxd", "index/containerFile", _module)
pulumi.runtime.registerResourceModule("lxd", "index/network", _module)
pulumi.runtime.registerResourceModule("lxd", "index/profile", _module)
pulumi.runtime.registerResourceModule("lxd", "index/publishImage", _module)
pulumi.runtime.registerResourceModule("lxd", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("lxd", "index/storagePool", _module)
pulumi.runtime.registerResourceModule("lxd", "index/volume", _module)
pulumi.runtime.registerResourceModule("lxd", "index/volumeContainerAttach", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("lxd", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:lxd") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
