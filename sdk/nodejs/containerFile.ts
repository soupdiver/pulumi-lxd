// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContainerFile extends pulumi.CustomResource {
    /**
     * Get an existing ContainerFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerFileState, opts?: pulumi.CustomResourceOptions): ContainerFile {
        return new ContainerFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lxd:index/containerFile:ContainerFile';

    /**
     * Returns true if the given object is an instance of ContainerFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerFile.__pulumiType;
    }

    public readonly append!: pulumi.Output<boolean | undefined>;
    public readonly containerName!: pulumi.Output<string>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly createDirectories!: pulumi.Output<boolean | undefined>;
    public readonly gid!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly remote!: pulumi.Output<string | undefined>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly targetFile!: pulumi.Output<string>;
    public readonly uid!: pulumi.Output<number | undefined>;

    /**
     * Create a ContainerFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerFileArgs | ContainerFileState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerFileState | undefined;
            inputs["append"] = state ? state.append : undefined;
            inputs["containerName"] = state ? state.containerName : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["createDirectories"] = state ? state.createDirectories : undefined;
            inputs["gid"] = state ? state.gid : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["remote"] = state ? state.remote : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["targetFile"] = state ? state.targetFile : undefined;
            inputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as ContainerFileArgs | undefined;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.targetFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetFile'");
            }
            inputs["append"] = args ? args.append : undefined;
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["createDirectories"] = args ? args.createDirectories : undefined;
            inputs["gid"] = args ? args.gid : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["remote"] = args ? args.remote : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["targetFile"] = args ? args.targetFile : undefined;
            inputs["uid"] = args ? args.uid : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ContainerFile.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerFile resources.
 */
export interface ContainerFileState {
    readonly append?: pulumi.Input<boolean>;
    readonly containerName?: pulumi.Input<string>;
    readonly content?: pulumi.Input<string>;
    readonly createDirectories?: pulumi.Input<boolean>;
    readonly gid?: pulumi.Input<number>;
    readonly mode?: pulumi.Input<string>;
    readonly remote?: pulumi.Input<string>;
    readonly source?: pulumi.Input<string>;
    readonly targetFile?: pulumi.Input<string>;
    readonly uid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ContainerFile resource.
 */
export interface ContainerFileArgs {
    readonly append?: pulumi.Input<boolean>;
    readonly containerName: pulumi.Input<string>;
    readonly content?: pulumi.Input<string>;
    readonly createDirectories?: pulumi.Input<boolean>;
    readonly gid?: pulumi.Input<number>;
    readonly mode?: pulumi.Input<string>;
    readonly remote?: pulumi.Input<string>;
    readonly source?: pulumi.Input<string>;
    readonly targetFile: pulumi.Input<string>;
    readonly uid?: pulumi.Input<number>;
}
