# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PublishImageArgs', 'PublishImage']

@pulumi.input_type
class PublishImageArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compression_algorithm: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 triggers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a PublishImage resource.
        :param pulumi.Input[Mapping[str, Any]] triggers: A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        pulumi.set(__self__, "container", container)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if compression_algorithm is not None:
            pulumi.set(__self__, "compression_algorithm", compression_algorithm)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter(name="compressionAlgorithm")
    def compression_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_algorithm")

    @compression_algorithm.setter
    def compression_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_algorithm", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class _PublishImageState:
    def __init__(__self__, *,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compression_algorithm: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 triggers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering PublishImage resources.
        :param pulumi.Input[Mapping[str, Any]] triggers: A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if compression_algorithm is not None:
            pulumi.set(__self__, "compression_algorithm", compression_algorithm)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter(name="compressionAlgorithm")
    def compression_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_algorithm")

    @compression_algorithm.setter
    def compression_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_algorithm", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "triggers", value)


class PublishImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compression_algorithm: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 triggers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Create a PublishImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] triggers: A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PublishImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PublishImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PublishImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublishImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compression_algorithm: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 triggers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublishImageArgs.__new__(PublishImageArgs)

            __props__.__dict__["aliases"] = aliases
            __props__.__dict__["compression_algorithm"] = compression_algorithm
            if container is None and not opts.urn:
                raise TypeError("Missing required property 'container'")
            __props__.__dict__["container"] = container
            __props__.__dict__["filename"] = filename
            __props__.__dict__["properties"] = properties
            __props__.__dict__["public"] = public
            __props__.__dict__["triggers"] = triggers
        super(PublishImage, __self__).__init__(
            'lxd:index/publishImage:PublishImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            compression_algorithm: Optional[pulumi.Input[str]] = None,
            container: Optional[pulumi.Input[str]] = None,
            filename: Optional[pulumi.Input[str]] = None,
            properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            triggers: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'PublishImage':
        """
        Get an existing PublishImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] triggers: A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublishImageState.__new__(_PublishImageState)

        __props__.__dict__["aliases"] = aliases
        __props__.__dict__["compression_algorithm"] = compression_algorithm
        __props__.__dict__["container"] = container
        __props__.__dict__["filename"] = filename
        __props__.__dict__["properties"] = properties
        __props__.__dict__["public"] = public
        __props__.__dict__["triggers"] = triggers
        return PublishImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="compressionAlgorithm")
    def compression_algorithm(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compression_algorithm")

    @property
    @pulumi.getter
    def container(self) -> pulumi.Output[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A map of arbitrary strings that, when changed, will force the resource to be replaced.
        """
        return pulumi.get(self, "triggers")

