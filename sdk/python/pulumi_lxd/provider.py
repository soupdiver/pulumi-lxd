# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 lxd_remote: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLXDRemoteArgs']]]] = None,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[bool] accept_remote_certificate: Accept the server certificate
        :param pulumi.Input[str] config_dir: The directory to look for existing LXD configuration. default = $HOME/.config/lxc
        :param pulumi.Input[str] refresh_interval: How often to poll during state changes (default 10s)
        """
        if lxd_remote is not None:
            pulumi.set(__self__, "lxd_remote", lxd_remote)
        if accept_remote_certificate is not None:
            pulumi.set(__self__, "accept_remote_certificate", accept_remote_certificate)
        if config_dir is not None:
            pulumi.set(__self__, "config_dir", config_dir)
        if generate_client_certificates is not None:
            pulumi.set(__self__, "generate_client_certificates", generate_client_certificates)
        if refresh_interval is not None:
            pulumi.set(__self__, "refresh_interval", refresh_interval)

    @property
    @pulumi.getter(name="LXDRemote")
    def lxd_remote(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLXDRemoteArgs']]]]:
        return pulumi.get(self, "lxd_remote")

    @lxd_remote.setter
    def lxd_remote(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderLXDRemoteArgs']]]]):
        pulumi.set(self, "lxd_remote", value)

    @property
    @pulumi.getter(name="acceptRemoteCertificate")
    def accept_remote_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept the server certificate
        """
        return pulumi.get(self, "accept_remote_certificate")

    @accept_remote_certificate.setter
    def accept_remote_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_remote_certificate", value)

    @property
    @pulumi.getter(name="configDir")
    def config_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to look for existing LXD configuration. default = $HOME/.config/lxc
        """
        return pulumi.get(self, "config_dir")

    @config_dir.setter
    def config_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_dir", value)

    @property
    @pulumi.getter(name="generateClientCertificates")
    def generate_client_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "generate_client_certificates")

    @generate_client_certificates.setter
    def generate_client_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_client_certificates", value)

    @property
    @pulumi.getter(name="refreshInterval")
    def refresh_interval(self) -> Optional[pulumi.Input[str]]:
        """
        How often to poll during state changes (default 10s)
        """
        return pulumi.get(self, "refresh_interval")

    @refresh_interval.setter
    def refresh_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_interval", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lxd_remote: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderLXDRemoteArgs']]]]] = None,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the lxd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_remote_certificate: Accept the server certificate
        :param pulumi.Input[str] config_dir: The directory to look for existing LXD configuration. default = $HOME/.config/lxc
        :param pulumi.Input[str] refresh_interval: How often to poll during state changes (default 10s)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the lxd package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lxd_remote: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderLXDRemoteArgs']]]]] = None,
                 accept_remote_certificate: Optional[pulumi.Input[bool]] = None,
                 config_dir: Optional[pulumi.Input[str]] = None,
                 generate_client_certificates: Optional[pulumi.Input[bool]] = None,
                 refresh_interval: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["lxd_remote"] = pulumi.Output.from_input(lxd_remote).apply(pulumi.runtime.to_json) if lxd_remote is not None else None
            __props__.__dict__["accept_remote_certificate"] = pulumi.Output.from_input(accept_remote_certificate).apply(pulumi.runtime.to_json) if accept_remote_certificate is not None else None
            __props__.__dict__["config_dir"] = config_dir
            __props__.__dict__["generate_client_certificates"] = pulumi.Output.from_input(generate_client_certificates).apply(pulumi.runtime.to_json) if generate_client_certificates is not None else None
            __props__.__dict__["refresh_interval"] = refresh_interval
        super(Provider, __self__).__init__(
            'lxd',
            resource_name,
            __props__,
            opts)

