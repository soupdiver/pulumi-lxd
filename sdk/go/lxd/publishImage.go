// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PublishImage struct {
	pulumi.CustomResourceState

	Aliases              pulumi.StringArrayOutput `pulumi:"aliases"`
	CompressionAlgorithm pulumi.StringPtrOutput   `pulumi:"compressionAlgorithm"`
	Container            pulumi.StringOutput      `pulumi:"container"`
	Filename             pulumi.StringPtrOutput   `pulumi:"filename"`
	Properties           pulumi.MapOutput         `pulumi:"properties"`
	Public               pulumi.BoolPtrOutput     `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapOutput `pulumi:"triggers"`
}

// NewPublishImage registers a new resource with the given unique name, arguments, and options.
func NewPublishImage(ctx *pulumi.Context,
	name string, args *PublishImageArgs, opts ...pulumi.ResourceOption) (*PublishImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	var resource PublishImage
	err := ctx.RegisterResource("lxd:index/publishImage:PublishImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublishImage gets an existing PublishImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublishImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublishImageState, opts ...pulumi.ResourceOption) (*PublishImage, error) {
	var resource PublishImage
	err := ctx.ReadResource("lxd:index/publishImage:PublishImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublishImage resources.
type publishImageState struct {
	Aliases              []string               `pulumi:"aliases"`
	CompressionAlgorithm *string                `pulumi:"compressionAlgorithm"`
	Container            *string                `pulumi:"container"`
	Filename             *string                `pulumi:"filename"`
	Properties           map[string]interface{} `pulumi:"properties"`
	Public               *bool                  `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers map[string]interface{} `pulumi:"triggers"`
}

type PublishImageState struct {
	Aliases              pulumi.StringArrayInput
	CompressionAlgorithm pulumi.StringPtrInput
	Container            pulumi.StringPtrInput
	Filename             pulumi.StringPtrInput
	Properties           pulumi.MapInput
	Public               pulumi.BoolPtrInput
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapInput
}

func (PublishImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*publishImageState)(nil)).Elem()
}

type publishImageArgs struct {
	Aliases              []string               `pulumi:"aliases"`
	CompressionAlgorithm *string                `pulumi:"compressionAlgorithm"`
	Container            string                 `pulumi:"container"`
	Filename             *string                `pulumi:"filename"`
	Properties           map[string]interface{} `pulumi:"properties"`
	Public               *bool                  `pulumi:"public"`
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers map[string]interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a PublishImage resource.
type PublishImageArgs struct {
	Aliases              pulumi.StringArrayInput
	CompressionAlgorithm pulumi.StringPtrInput
	Container            pulumi.StringInput
	Filename             pulumi.StringPtrInput
	Properties           pulumi.MapInput
	Public               pulumi.BoolPtrInput
	// A map of arbitrary strings that, when changed, will force the resource to be replaced.
	Triggers pulumi.MapInput
}

func (PublishImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publishImageArgs)(nil)).Elem()
}

type PublishImageInput interface {
	pulumi.Input

	ToPublishImageOutput() PublishImageOutput
	ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput
}

func (*PublishImage) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishImage)(nil))
}

func (i *PublishImage) ToPublishImageOutput() PublishImageOutput {
	return i.ToPublishImageOutputWithContext(context.Background())
}

func (i *PublishImage) ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageOutput)
}

func (i *PublishImage) ToPublishImagePtrOutput() PublishImagePtrOutput {
	return i.ToPublishImagePtrOutputWithContext(context.Background())
}

func (i *PublishImage) ToPublishImagePtrOutputWithContext(ctx context.Context) PublishImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImagePtrOutput)
}

type PublishImagePtrInput interface {
	pulumi.Input

	ToPublishImagePtrOutput() PublishImagePtrOutput
	ToPublishImagePtrOutputWithContext(ctx context.Context) PublishImagePtrOutput
}

type publishImagePtrType PublishImageArgs

func (*publishImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishImage)(nil))
}

func (i *publishImagePtrType) ToPublishImagePtrOutput() PublishImagePtrOutput {
	return i.ToPublishImagePtrOutputWithContext(context.Background())
}

func (i *publishImagePtrType) ToPublishImagePtrOutputWithContext(ctx context.Context) PublishImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImagePtrOutput)
}

// PublishImageArrayInput is an input type that accepts PublishImageArray and PublishImageArrayOutput values.
// You can construct a concrete instance of `PublishImageArrayInput` via:
//
//          PublishImageArray{ PublishImageArgs{...} }
type PublishImageArrayInput interface {
	pulumi.Input

	ToPublishImageArrayOutput() PublishImageArrayOutput
	ToPublishImageArrayOutputWithContext(context.Context) PublishImageArrayOutput
}

type PublishImageArray []PublishImageInput

func (PublishImageArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*PublishImage)(nil))
}

func (i PublishImageArray) ToPublishImageArrayOutput() PublishImageArrayOutput {
	return i.ToPublishImageArrayOutputWithContext(context.Background())
}

func (i PublishImageArray) ToPublishImageArrayOutputWithContext(ctx context.Context) PublishImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageArrayOutput)
}

// PublishImageMapInput is an input type that accepts PublishImageMap and PublishImageMapOutput values.
// You can construct a concrete instance of `PublishImageMapInput` via:
//
//          PublishImageMap{ "key": PublishImageArgs{...} }
type PublishImageMapInput interface {
	pulumi.Input

	ToPublishImageMapOutput() PublishImageMapOutput
	ToPublishImageMapOutputWithContext(context.Context) PublishImageMapOutput
}

type PublishImageMap map[string]PublishImageInput

func (PublishImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*PublishImage)(nil))
}

func (i PublishImageMap) ToPublishImageMapOutput() PublishImageMapOutput {
	return i.ToPublishImageMapOutputWithContext(context.Background())
}

func (i PublishImageMap) ToPublishImageMapOutputWithContext(ctx context.Context) PublishImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishImageMapOutput)
}

type PublishImageOutput struct {
	*pulumi.OutputState
}

func (PublishImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishImage)(nil))
}

func (o PublishImageOutput) ToPublishImageOutput() PublishImageOutput {
	return o
}

func (o PublishImageOutput) ToPublishImageOutputWithContext(ctx context.Context) PublishImageOutput {
	return o
}

func (o PublishImageOutput) ToPublishImagePtrOutput() PublishImagePtrOutput {
	return o.ToPublishImagePtrOutputWithContext(context.Background())
}

func (o PublishImageOutput) ToPublishImagePtrOutputWithContext(ctx context.Context) PublishImagePtrOutput {
	return o.ApplyT(func(v PublishImage) *PublishImage {
		return &v
	}).(PublishImagePtrOutput)
}

type PublishImagePtrOutput struct {
	*pulumi.OutputState
}

func (PublishImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishImage)(nil))
}

func (o PublishImagePtrOutput) ToPublishImagePtrOutput() PublishImagePtrOutput {
	return o
}

func (o PublishImagePtrOutput) ToPublishImagePtrOutputWithContext(ctx context.Context) PublishImagePtrOutput {
	return o
}

type PublishImageArrayOutput struct{ *pulumi.OutputState }

func (PublishImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishImage)(nil))
}

func (o PublishImageArrayOutput) ToPublishImageArrayOutput() PublishImageArrayOutput {
	return o
}

func (o PublishImageArrayOutput) ToPublishImageArrayOutputWithContext(ctx context.Context) PublishImageArrayOutput {
	return o
}

func (o PublishImageArrayOutput) Index(i pulumi.IntInput) PublishImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublishImage {
		return vs[0].([]PublishImage)[vs[1].(int)]
	}).(PublishImageOutput)
}

type PublishImageMapOutput struct{ *pulumi.OutputState }

func (PublishImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PublishImage)(nil))
}

func (o PublishImageMapOutput) ToPublishImageMapOutput() PublishImageMapOutput {
	return o
}

func (o PublishImageMapOutput) ToPublishImageMapOutputWithContext(ctx context.Context) PublishImageMapOutput {
	return o
}

func (o PublishImageMapOutput) MapIndex(k pulumi.StringInput) PublishImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PublishImage {
		return vs[0].(map[string]PublishImage)[vs[1].(string)]
	}).(PublishImageOutput)
}

func init() {
	pulumi.RegisterOutputType(PublishImageOutput{})
	pulumi.RegisterOutputType(PublishImagePtrOutput{})
	pulumi.RegisterOutputType(PublishImageArrayOutput{})
	pulumi.RegisterOutputType(PublishImageMapOutput{})
}
