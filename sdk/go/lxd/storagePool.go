// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StoragePool struct {
	pulumi.CustomResourceState

	Config pulumi.MapOutput       `pulumi:"config"`
	Driver pulumi.StringOutput    `pulumi:"driver"`
	Name   pulumi.StringOutput    `pulumi:"name"`
	Remote pulumi.StringPtrOutput `pulumi:"remote"`
	Target pulumi.StringPtrOutput `pulumi:"target"`
}

// NewStoragePool registers a new resource with the given unique name, arguments, and options.
func NewStoragePool(ctx *pulumi.Context,
	name string, args *StoragePoolArgs, opts ...pulumi.ResourceOption) (*StoragePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Driver == nil {
		return nil, errors.New("invalid value for required argument 'Driver'")
	}
	var resource StoragePool
	err := ctx.RegisterResource("lxd:index/storagePool:StoragePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoragePool gets an existing StoragePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoragePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoragePoolState, opts ...pulumi.ResourceOption) (*StoragePool, error) {
	var resource StoragePool
	err := ctx.ReadResource("lxd:index/storagePool:StoragePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoragePool resources.
type storagePoolState struct {
	Config map[string]interface{} `pulumi:"config"`
	Driver *string                `pulumi:"driver"`
	Name   *string                `pulumi:"name"`
	Remote *string                `pulumi:"remote"`
	Target *string                `pulumi:"target"`
}

type StoragePoolState struct {
	Config pulumi.MapInput
	Driver pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	Remote pulumi.StringPtrInput
	Target pulumi.StringPtrInput
}

func (StoragePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolState)(nil)).Elem()
}

type storagePoolArgs struct {
	Config map[string]interface{} `pulumi:"config"`
	Driver string                 `pulumi:"driver"`
	Name   *string                `pulumi:"name"`
	Remote *string                `pulumi:"remote"`
	Target *string                `pulumi:"target"`
}

// The set of arguments for constructing a StoragePool resource.
type StoragePoolArgs struct {
	Config pulumi.MapInput
	Driver pulumi.StringInput
	Name   pulumi.StringPtrInput
	Remote pulumi.StringPtrInput
	Target pulumi.StringPtrInput
}

func (StoragePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storagePoolArgs)(nil)).Elem()
}

type StoragePoolInput interface {
	pulumi.Input

	ToStoragePoolOutput() StoragePoolOutput
	ToStoragePoolOutputWithContext(ctx context.Context) StoragePoolOutput
}

func (*StoragePool) ElementType() reflect.Type {
	return reflect.TypeOf((*StoragePool)(nil))
}

func (i *StoragePool) ToStoragePoolOutput() StoragePoolOutput {
	return i.ToStoragePoolOutputWithContext(context.Background())
}

func (i *StoragePool) ToStoragePoolOutputWithContext(ctx context.Context) StoragePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolOutput)
}

func (i *StoragePool) ToStoragePoolPtrOutput() StoragePoolPtrOutput {
	return i.ToStoragePoolPtrOutputWithContext(context.Background())
}

func (i *StoragePool) ToStoragePoolPtrOutputWithContext(ctx context.Context) StoragePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolPtrOutput)
}

type StoragePoolPtrInput interface {
	pulumi.Input

	ToStoragePoolPtrOutput() StoragePoolPtrOutput
	ToStoragePoolPtrOutputWithContext(ctx context.Context) StoragePoolPtrOutput
}

type storagePoolPtrType StoragePoolArgs

func (*storagePoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePool)(nil))
}

func (i *storagePoolPtrType) ToStoragePoolPtrOutput() StoragePoolPtrOutput {
	return i.ToStoragePoolPtrOutputWithContext(context.Background())
}

func (i *storagePoolPtrType) ToStoragePoolPtrOutputWithContext(ctx context.Context) StoragePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolPtrOutput)
}

// StoragePoolArrayInput is an input type that accepts StoragePoolArray and StoragePoolArrayOutput values.
// You can construct a concrete instance of `StoragePoolArrayInput` via:
//
//          StoragePoolArray{ StoragePoolArgs{...} }
type StoragePoolArrayInput interface {
	pulumi.Input

	ToStoragePoolArrayOutput() StoragePoolArrayOutput
	ToStoragePoolArrayOutputWithContext(context.Context) StoragePoolArrayOutput
}

type StoragePoolArray []StoragePoolInput

func (StoragePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*StoragePool)(nil))
}

func (i StoragePoolArray) ToStoragePoolArrayOutput() StoragePoolArrayOutput {
	return i.ToStoragePoolArrayOutputWithContext(context.Background())
}

func (i StoragePoolArray) ToStoragePoolArrayOutputWithContext(ctx context.Context) StoragePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolArrayOutput)
}

// StoragePoolMapInput is an input type that accepts StoragePoolMap and StoragePoolMapOutput values.
// You can construct a concrete instance of `StoragePoolMapInput` via:
//
//          StoragePoolMap{ "key": StoragePoolArgs{...} }
type StoragePoolMapInput interface {
	pulumi.Input

	ToStoragePoolMapOutput() StoragePoolMapOutput
	ToStoragePoolMapOutputWithContext(context.Context) StoragePoolMapOutput
}

type StoragePoolMap map[string]StoragePoolInput

func (StoragePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*StoragePool)(nil))
}

func (i StoragePoolMap) ToStoragePoolMapOutput() StoragePoolMapOutput {
	return i.ToStoragePoolMapOutputWithContext(context.Background())
}

func (i StoragePoolMap) ToStoragePoolMapOutputWithContext(ctx context.Context) StoragePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePoolMapOutput)
}

type StoragePoolOutput struct {
	*pulumi.OutputState
}

func (StoragePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoragePool)(nil))
}

func (o StoragePoolOutput) ToStoragePoolOutput() StoragePoolOutput {
	return o
}

func (o StoragePoolOutput) ToStoragePoolOutputWithContext(ctx context.Context) StoragePoolOutput {
	return o
}

func (o StoragePoolOutput) ToStoragePoolPtrOutput() StoragePoolPtrOutput {
	return o.ToStoragePoolPtrOutputWithContext(context.Background())
}

func (o StoragePoolOutput) ToStoragePoolPtrOutputWithContext(ctx context.Context) StoragePoolPtrOutput {
	return o.ApplyT(func(v StoragePool) *StoragePool {
		return &v
	}).(StoragePoolPtrOutput)
}

type StoragePoolPtrOutput struct {
	*pulumi.OutputState
}

func (StoragePoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragePool)(nil))
}

func (o StoragePoolPtrOutput) ToStoragePoolPtrOutput() StoragePoolPtrOutput {
	return o
}

func (o StoragePoolPtrOutput) ToStoragePoolPtrOutputWithContext(ctx context.Context) StoragePoolPtrOutput {
	return o
}

type StoragePoolArrayOutput struct{ *pulumi.OutputState }

func (StoragePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StoragePool)(nil))
}

func (o StoragePoolArrayOutput) ToStoragePoolArrayOutput() StoragePoolArrayOutput {
	return o
}

func (o StoragePoolArrayOutput) ToStoragePoolArrayOutputWithContext(ctx context.Context) StoragePoolArrayOutput {
	return o
}

func (o StoragePoolArrayOutput) Index(i pulumi.IntInput) StoragePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StoragePool {
		return vs[0].([]StoragePool)[vs[1].(int)]
	}).(StoragePoolOutput)
}

type StoragePoolMapOutput struct{ *pulumi.OutputState }

func (StoragePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StoragePool)(nil))
}

func (o StoragePoolMapOutput) ToStoragePoolMapOutput() StoragePoolMapOutput {
	return o
}

func (o StoragePoolMapOutput) ToStoragePoolMapOutputWithContext(ctx context.Context) StoragePoolMapOutput {
	return o
}

func (o StoragePoolMapOutput) MapIndex(k pulumi.StringInput) StoragePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StoragePool {
		return vs[0].(map[string]StoragePool)[vs[1].(string)]
	}).(StoragePoolOutput)
}

func init() {
	pulumi.RegisterOutputType(StoragePoolOutput{})
	pulumi.RegisterOutputType(StoragePoolPtrOutput{})
	pulumi.RegisterOutputType(StoragePoolArrayOutput{})
	pulumi.RegisterOutputType(StoragePoolMapOutput{})
}
