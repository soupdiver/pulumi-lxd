// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lxd

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Container struct {
	pulumi.CustomResourceState

	Config      pulumi.MapOutput             `pulumi:"config"`
	Devices     ContainerDeviceArrayOutput   `pulumi:"devices"`
	Ephemeral   pulumi.BoolPtrOutput         `pulumi:"ephemeral"`
	Files       ContainerFileTypeArrayOutput `pulumi:"files"`
	Image       pulumi.StringOutput          `pulumi:"image"`
	IpAddress   pulumi.StringOutput          `pulumi:"ipAddress"`
	Ipv4Address pulumi.StringOutput          `pulumi:"ipv4Address"`
	Ipv6Address pulumi.StringOutput          `pulumi:"ipv6Address"`
	Limits      pulumi.MapOutput             `pulumi:"limits"`
	MacAddress  pulumi.StringOutput          `pulumi:"macAddress"`
	Name        pulumi.StringOutput          `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrOutput     `pulumi:"privileged"`
	Profiles       pulumi.StringArrayOutput `pulumi:"profiles"`
	Remote         pulumi.StringPtrOutput   `pulumi:"remote"`
	StartContainer pulumi.BoolPtrOutput     `pulumi:"startContainer"`
	Status         pulumi.StringOutput      `pulumi:"status"`
	Target         pulumi.StringOutput      `pulumi:"target"`
	Type           pulumi.StringOutput      `pulumi:"type"`
	WaitForNetwork pulumi.BoolPtrOutput     `pulumi:"waitForNetwork"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	var resource Container
	err := ctx.RegisterResource("lxd:index/container:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("lxd:index/container:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
	Config      map[string]interface{} `pulumi:"config"`
	Devices     []ContainerDevice      `pulumi:"devices"`
	Ephemeral   *bool                  `pulumi:"ephemeral"`
	Files       []ContainerFileType    `pulumi:"files"`
	Image       *string                `pulumi:"image"`
	IpAddress   *string                `pulumi:"ipAddress"`
	Ipv4Address *string                `pulumi:"ipv4Address"`
	Ipv6Address *string                `pulumi:"ipv6Address"`
	Limits      map[string]interface{} `pulumi:"limits"`
	MacAddress  *string                `pulumi:"macAddress"`
	Name        *string                `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     *bool    `pulumi:"privileged"`
	Profiles       []string `pulumi:"profiles"`
	Remote         *string  `pulumi:"remote"`
	StartContainer *bool    `pulumi:"startContainer"`
	Status         *string  `pulumi:"status"`
	Target         *string  `pulumi:"target"`
	Type           *string  `pulumi:"type"`
	WaitForNetwork *bool    `pulumi:"waitForNetwork"`
}

type ContainerState struct {
	Config      pulumi.MapInput
	Devices     ContainerDeviceArrayInput
	Ephemeral   pulumi.BoolPtrInput
	Files       ContainerFileTypeArrayInput
	Image       pulumi.StringPtrInput
	IpAddress   pulumi.StringPtrInput
	Ipv4Address pulumi.StringPtrInput
	Ipv6Address pulumi.StringPtrInput
	Limits      pulumi.MapInput
	MacAddress  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrInput
	Profiles       pulumi.StringArrayInput
	Remote         pulumi.StringPtrInput
	StartContainer pulumi.BoolPtrInput
	Status         pulumi.StringPtrInput
	Target         pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	WaitForNetwork pulumi.BoolPtrInput
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	Config    map[string]interface{} `pulumi:"config"`
	Devices   []ContainerDevice      `pulumi:"devices"`
	Ephemeral *bool                  `pulumi:"ephemeral"`
	Files     []ContainerFileType    `pulumi:"files"`
	Image     string                 `pulumi:"image"`
	Limits    map[string]interface{} `pulumi:"limits"`
	Name      *string                `pulumi:"name"`
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     *bool    `pulumi:"privileged"`
	Profiles       []string `pulumi:"profiles"`
	Remote         *string  `pulumi:"remote"`
	StartContainer *bool    `pulumi:"startContainer"`
	Target         *string  `pulumi:"target"`
	Type           *string  `pulumi:"type"`
	WaitForNetwork *bool    `pulumi:"waitForNetwork"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	Config    pulumi.MapInput
	Devices   ContainerDeviceArrayInput
	Ephemeral pulumi.BoolPtrInput
	Files     ContainerFileTypeArrayInput
	Image     pulumi.StringInput
	Limits    pulumi.MapInput
	Name      pulumi.StringPtrInput
	// Deprecated: Use a config setting of security.privileged=1 instead
	Privileged     pulumi.BoolPtrInput
	Profiles       pulumi.StringArrayInput
	Remote         pulumi.StringPtrInput
	StartContainer pulumi.BoolPtrInput
	Target         pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	WaitForNetwork pulumi.BoolPtrInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

func (*Container) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil))
}

func (i *Container) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i *Container) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

func (i *Container) ToContainerPtrOutput() ContainerPtrOutput {
	return i.ToContainerPtrOutputWithContext(context.Background())
}

func (i *Container) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPtrOutput)
}

type ContainerPtrInput interface {
	pulumi.Input

	ToContainerPtrOutput() ContainerPtrOutput
	ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput
}

type containerPtrType ContainerArgs

func (*containerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil))
}

func (i *containerPtrType) ToContainerPtrOutput() ContainerPtrOutput {
	return i.ToContainerPtrOutputWithContext(context.Background())
}

func (i *containerPtrType) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPtrOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//          ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Container)(nil))
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// ContainerMapInput is an input type that accepts ContainerMap and ContainerMapOutput values.
// You can construct a concrete instance of `ContainerMapInput` via:
//
//          ContainerMap{ "key": ContainerArgs{...} }
type ContainerMapInput interface {
	pulumi.Input

	ToContainerMapOutput() ContainerMapOutput
	ToContainerMapOutputWithContext(context.Context) ContainerMapOutput
}

type ContainerMap map[string]ContainerInput

func (ContainerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Container)(nil))
}

func (i ContainerMap) ToContainerMapOutput() ContainerMapOutput {
	return i.ToContainerMapOutputWithContext(context.Background())
}

func (i ContainerMap) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMapOutput)
}

type ContainerOutput struct {
	*pulumi.OutputState
}

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil))
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerPtrOutput() ContainerPtrOutput {
	return o.ToContainerPtrOutputWithContext(context.Background())
}

func (o ContainerOutput) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return o.ApplyT(func(v Container) *Container {
		return &v
	}).(ContainerPtrOutput)
}

type ContainerPtrOutput struct {
	*pulumi.OutputState
}

func (ContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil))
}

func (o ContainerPtrOutput) ToContainerPtrOutput() ContainerPtrOutput {
	return o
}

func (o ContainerPtrOutput) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return o
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil))
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

type ContainerMapOutput struct{ *pulumi.OutputState }

func (ContainerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Container)(nil))
}

func (o ContainerMapOutput) ToContainerMapOutput() ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) MapIndex(k pulumi.StringInput) ContainerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Container {
		return vs[0].(map[string]Container)[vs[1].(string)]
	}).(ContainerOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerPtrOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerMapOutput{})
}
